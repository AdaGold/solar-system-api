# ---------------------------------------
# ---------------------------------------
# ---------Moon route tests--------------
# ---------------------------------------
# ---------------------------------------

def test_get_moon_by_id_return_200_successful_code(client, saved_two_moons):
    response = client.get("/moons/1")
    response_body = response.get_json()

    assert response.status_code == 200
    assert response_body["name"] == "Moon1"


def test_get_moon_by_not_exist_id_return_404(client):
    response = client.get("/moons/1")
    response_body = response.get_json()

    assert response.status_code == 404


def test_get_moon_by_invalid_moon_id_return_400_bad_request_error(client, saved_two_moons):
    response = client.get("/moons/hello")
    response_body = response.get_json()

    assert response.status_code == 400
    assert response_body == {"message": "Moon hello is invalid"}


def test_get_all_moons_with_no_records_return_empty_array(client):
    response = client.get("/moons")
    response_body = response.get_json()

    assert response.status_code == 200
    assert response_body == []


def test_get_all_moons_with_two_records_return_array_with_size_2(client, saved_two_moons):
    response = client.get("/moons")
    response_body = response.get_json()

    assert response.status_code == 200
    assert len(response_body) == 2
    assert response_body[0]["id"] == 1
    assert response_body[0]["name"] == "Moon1"
    assert response_body[1]["id"] == 2
    assert response_body[1]["name"] == "Moon2"


def test_create_one_moon_return_201_successfully_created(client):
    response = client.post("/moons",
                        json={"name": "Moon3"})
    response_body = response.get_json()

    assert response.status_code == 201
    assert response_body == "Moon Moon3 successfully created."


def test_create_moon_to_planet_by_planet_id(client, saved_two_planets):
    response = client.post("/moons/1/moon",
                        json={
                            "name": "planet1_moon"})
    response_body = response.get_json()

    assert response.status_code == 201
    assert response_body["name"] == "planet1_moon"
    assert response_body["planet_id"] == 1
    assert response_body["planet"] == "Mars"


def test_get_moons_by_planet_id_return_empty_list_of_moons(client, saved_two_planets):
    response = client.get("moons/1/moons")
    response_body = response.get_json()

    assert response.status_code == 200
    assert response_body["id"] == 1
    assert response_body["name"] == "Mars"
    assert response_body["description"] == "This is planet: Mars"
    assert response_body["gravity"] == 3.721
    assert response_body["distance_from_earth"] == 60.81
    assert response_body["moons"] == []


def test_get_moons_by_planet_id_return_list_of_two_moons(client, saved_two_planets):
    post_response = client.post("/moons/1/moon",
                                json={"name": "Moon1"
                                    })
    post_response = client.post("/moons/1/moon",
                                json={"name": "Moon2"
                                    })
    response = client.get("moons/1/moons")
    response_body = response.get_json()

    assert response.status_code == 200
    assert response_body["id"] == 1
    assert response_body["name"] == "Mars"
    assert response_body["description"] == "This is planet: Mars"
    assert response_body["gravity"] == 3.721
    assert response_body["distance_from_earth"] == 60.81
    assert response_body["moons"] == ["Moon1", "Moon2"]


def test_create_moons_by_invalid_planet_id(client, saved_two_planets):
    response = client.post("/moons/invalid/moon", json={"name": "Moon1"})
    assert response.status_code == 400
    assert response.get_json() == {"message": "Planet invalid is invalid"}


def test_create_moons_by_a_non_existing_planet_id(client, saved_two_planets):
    response = client.post("/moons/100/moon",json={"name": "Moon1"})
    assert response.status_code == 404
    assert response.get_json() == {"message": "Planet 100 not found"}


def test_validate_model_missing_moon_record(saved_two_moons):
    # Calling `validate_model` without being invoked by a route will
    # cause an `HTTPException` when an `abort` statement is reached
    with pytest.raises(HTTPException):
        result_planet = validate_model(Moon, "3")


def test_validate_model_invalid_moon_id(saved_two_moons):
    with pytest.raises(HTTPException):
        result_planet = validate_model(Moon, "invalid_id")
